<!DOCTYPE html>
<html lang="en">
<head>
	<!--<meta name="viewport" content="width=device-width, initial-scale=1.0">-->
    <title>Hauntbox</title>
<link rel="stylesheet" href="bs_full.css" type="text/css" media="screen" \>
<link rel="shortcut icon" type="image/x-icon" href="favicon.ico">
<script src="jqry171.js"></script>

<!--<link href='http://fonts.googleapis.com/css?family=Chango' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Reenie+Beanie' rel='stylesheet' type='text/css'>
-->
<style type="text/css">
	/*	dark grey background: rgb(34,34,34);*/
	@font-face {
	  font-family: 'Reenie Beanie';
	  font-style: normal;
	  font-weight: normal;
	  src: local('Reenie Beanie'), local('ReenieBeanie'), url('fontrb.ttf') format('truetype');
	}
	@font-face {
	  font-family: 'Chango';
	  font-style: normal;
	  font-weight: 400;
	  src: local('Chango Regular'), local('Chango-Regular'), url('fontch.ttf') format('truetype');
	}
	body {
		background: url(navbg.gif);
		background-repeat:repeat-x;
	}
	.navbar {
		margin-top: 107px; /* puts the navbar where it should be */
		margin-left: 12px;	/* lines up everything left except checkboxes */
	}
	.navbar .nav > li > a {
		/* puts the | spacer between the nav 
		border-right: 1px solid rgb(88,89,91); */
		padding-right: 15px;
		font-family: Chango;
		text-transform: lowercase;
		color: rgb(88,89,91);
	}
	.navbar li.active a {
		color: rgb(214,222,35);
	}
	.navbar .logo {
		position: absolute;
		top: 45px;
		left: 900px;
	}
	input[name="enable_disable"] {
		/* the checkbox on each row */
		margin: 0 2px 0 0;
	}
	.sentence_headings, div.help .container {
		margin-left: 23px;/*enough room for a checkbox*/
	/*	margin-top: 23px; /* white space! */
	}
	.inner_sentence {
		display: inline;
	}
	#display_container {
		margin-top: 155px;
		width: 1200px;
	}
	.subheader {
		clear: both;
		width: 100%;
		padding: 22px 0 24px 0;
		color: #fff;
		margin-bottom:22px; /* white space! */
	}
	h2 {
		font-family: Chango;
		font-size: 30px;
		font-weight: normal;
		text-transform: uppercase;
		margin-right: 12px;
		margin-left:21px; /* lines up with everything left except checkboxes */
		float: left;
	}
	.subheader p{
		font-size: 8pt;
		line-height: 15px;
		padding-top: 4px;
		font-family: arial, sans-serif;
		color: rgb(204,204,204);
	}

	div.settings input[type="text"] {
		width: 8.5em;
	}
	div.alert{
		display:none;
	}
	input, div.settings input.retrigger { /*slim up the wide 999 second boxes */
		width: 2.5em;
		text-align:right;
	}
	.settings select, .sensor_state, .output_state {
		width: 4.4em;
	}
	label {
		font-weight: normal;
	}
	div.duration_container {
		display: inline-block;
	}
	div.wait, div.duration {
		display: inline-block;
		position: relative;
		top: 8px;
	}
	div.wait span, div.duration span {
		display: block;
		border: 1px solid #aaa;
		background: rgb(247,247,247);
		font-size: 1em;
		text-align: center;
		text-decoration: none;
		color: #000;
		width: 20px;
		height: 20px;
		border-radius: 10px;
		-moz-border-radius: 10px;
		margin: 0 0 -1px 0;
		cursor: pointer;
		-webkit-user-select: none;
	}
	div.wait span:first-child, div.duration span:first-child {
		position:relative;
		top:-5px;
	}
	div.outputs_container, div.button_container {
		margin-top: 2em;
	}
	.sentence_headings {
		width: 1200px;
	}
	.sentence_headings h3 {
		color: rgb(34,34,34);
		font-family: Chango;
		font-size: 10pt;
		text-transform: uppercase;
		border-bottom: 2px solid rgb(200,200,200);
		float: left;
		margin-right: 10px;
	}
	.sentence_headings .input {
		width: 259px;
	}
	.sentence_headings .delay {
		width: 310px;
	}
	.sentence_headings .output {
		width: 175px;
	}
	.sentence_headings .duration {
		width: 340px;
	}
	.sentence_headings .voltage {
		width: 105px;
	}
	.sentence_headings .io_name {
		width: 125px;
	}
	.sentence_headings .high_or_low {
		width: 380px;
	}
	.sentence_headings .retrigger {
		width: 360px;
	}
	div.sentence_container {
		padding-left:10px;
	}
	div.sentence_container, .sentence {
		clear: both;
		color: rgb(88,89,91);
		font-family: 'Reenie Beanie';
		font-size: 26px;
	}
	div.settings div.sentence {
		color: rgb(88,89,91);
		font-family: 'Reenie Beanie';
		font-size: 22px;
	}
	div.sentence {
		height: 60px;
		padding: 2px 0 0 0;
	}
	span.input, span.output, span.duration, span.delay {
		display: inline-block;
		margin: 0 10px 0 0;
		padding: 0 5px 5px 5px;
		border-bottom: 1px solid rgb(225,225,225);
	}
	div.alert {
		position: absolute;
		top: 0px;
		left:50%;
		margin-left: -160px;
		width: 320px;
	}
</style>

<script>
$(function(){//shortcut for doc.ready
	//##################################### Important Variables ##################################### 
	
	var initial_rows = 6;					//how many rows to start with
	var max_rows = 12;						//maximum number of rows (based on arduino capability)
	var min_rows = 1;						//minimum number of rows (based on usability)
	var increment_on_hold_speed = 50;		//auto ++ing value every n milliseconds
	var increment_hold_delay = 1000;		//the delay in milliseconds (timeout) before auto ++ing
	var interval = null, timeout = null;	//vars for auto incrementing and auto delay
	var unsaved_changes = false;			//keep track if user has unsaved changes
	var current_page = "program";			//keeps track of current page
	var next_page = null;					//keeps track of next page
	var ABC = ["A","B","C","D","E","F"]		//used when naming the dynamically generated rows
	
	//ADC threshold values for inputs/outputs. Maths are done here to spare Arduino CPU cycles
	var threshold_5V = 103;				//(5V / 5)*1024 = 103
	var threshold_12V = 246;			//(12V / 5)*1024 = 246
	var threshold_24V = 492;			//(24V / 5)*1024 = 492
	
	var default_program = "0,0,0,0,0,0;1,1,1,1,1,1;0,0,0,0,0,0;0,0,0,0,0,0;1,1,1,1,1,1;0,1,2,0,1,2;0,1,3,5,10,30;2;00"
	var default_settings = "1,1,1,1,1,1,1,1,1,1,1,1;garage,my room,hall,cemetery,cornfield,swamp;UV,light,strobe,sound,air horn,zombie;" + threshold_5V + "," + threshold_5V + "," + threshold_5V + "," + threshold_5V + "," + threshold_5V + "," + threshold_5V + "," + threshold_5V + "," + threshold_5V + "," + threshold_5V + "," + threshold_5V + "," + threshold_5V + "," + threshold_5V + ";1,1,1,1,1,1;2;00;"
	var local_input_names = local_output_names = new Array();

	//##################################### Mobile Detection #####################################
	function detectmobile() { 
		if (navigator.userAgent.match(/Android/i)
		|| navigator.userAgent.match(/webOS/i)
		|| navigator.userAgent.match(/iPhone/i)
		|| navigator.userAgent.match(/iPad/i)
		|| navigator.userAgent.match(/iPod/i)
		|| navigator.userAgent.match(/BlackBerry/i)
		|| navigator.userAgent.match(/Windows Phone/i)) {
			return true;
		} else {
			return false;
		}
	}
	//##################################### Initial Page Load Stuff ##################################### 
	$("#unsaved_modal").modal('hide');		//hide the unsaved changes modal
	$("div.alert").hide();					//hide the alerts
	$("#display_container").children().hide();			//load with all "tabs" hidden
	$(".inner_sentence").fadeTo(0,.5);
	
	for (i=1;i<initial_rows;i++){						//dynamically build the program rows
		$("div.program .sentence").first().clone({deepWithDataAndEvents: true}).appendTo(".sentence_container");
	}
	for (i=1;i<6;i++){						//dynamically build the settings rows
		//the settings rows are complicated by the radios that must be uniquely named
		$("div.settings .inputs_container .sentence").first().clone({deepWithDataAndEvents: true}).appendTo("div.settings .inputs_container").children("span").html("Input " + ABC[i]).parent().children("input[type=radio]").attr("name","highlow" + (i+1));
		$("div.settings .outputs_container .sentence").first().clone({deepWithDataAndEvents: true}).appendTo("div.settings .outputs_container").children("span").html("Output " + (i+1)).parent().children("input[type=radio]").attr("name","output_highlow" + (i+1));
	}
	$("div.program").show();							//show the program div

	function load_settings(){
		//this should load values from the firmware...
		//including intelligent defaults and populate the form correctly

		//Data receiving protocol (Arduino --> Browser)
		//Input array;Input on/off;On delay;Output array;Output on/off/toggle;duration type;Duration;status code;Free RAM;
		//0,0,0,0,0,0;1,1,1,1,1,1;0,0,0,0,0,0;0,0,0,0,0,0;1,1,1,1,1,1;2,2,2,2,2,2;0,0,0,0,0,0;0;182;

		//status codes
		//0 = all good
		//1 = program doesn't make sense --> reload or use defaults
		//2 = no SD card --> insert valid one and reset Arduino
		//3 = file opening problem --> NOT SURE WHAT TO DO
		//4 = corruption or read/write problem --> NOT SURE WHAT TO DO
				
		$.ajax({
			url: '/program',
			type: 'GET',
			success: function(data){
				populate_program(data);
				update_status_and_ram(data);
			},
			error: function(data){
				//failure ALERT HERE..............
				populate_program(default_program);
				status_message(8);//				alert("Error loading program.txt Default program used");
			}
		});
		
		function populate_program(string){
			var input_array = input_onoff = on_delay = output_array = output_onoff = duration_type = duration = new Array();
		
			var incoming_program = string.split(";")		//split into substrings
			var input_array = incoming_program[0].split(",");	//split substrings into arrays of strings "1,2,3,..." --> ["1","2","3",...]
			var input_onoff = incoming_program[1].split(",");
			var on_delay = incoming_program[2].split(",");
			var output_array = incoming_program[3].split(",");
			var output_onoff = incoming_program[4].split(",");
			var duration_type = incoming_program[5].split(",");
			var duration = incoming_program[6].split(",");
				
			array_of_strings_to_ints(input_array);				//run all the arrays through the integerizer
			array_of_strings_to_ints(input_onoff);				//CONSIDER PUTTING THE SPLIT "," STUFF INTO THE CLEAN() FUNCTION
	 		array_of_strings_to_ints(on_delay);
			array_of_strings_to_ints(output_array);
			array_of_strings_to_ints(output_onoff);
			array_of_strings_to_ints(duration_type);
			array_of_strings_to_ints(duration);
		
			
			console.log(input_array);
			console.log(input_onoff);
			console.log(on_delay);
			console.log(output_array);
			console.log(output_onoff);
			console.log(duration_type);
			console.log(duration);
			
			
			set_inputs("select.sensor",input_array);			//set each input with the appropriate array
			set_inputs("select.sensor_state",input_onoff);
			set_inputs("input.wait_time",on_delay);
			set_inputs("select.output",output_array);
			set_inputs("select.output_state",output_onoff);
			set_inputs("select.duration_type",duration_type);
			set_inputs("input.output_duration",duration);
		}//end populate_program()
		
		//Settings receiving protocol (Arduino --> Browser)
		//input defs;output defs;input names;output names;thresholds;retrigger;status code;Free RAM;
		//"1,1,1,1,1,1,1,1,1,1,1,1;input1,input2,input3,input4,input5,input6;output1,output2,output3,output4,output5,output6;thresholds...;retrigger;0;199;"
			
		$.ajax({						//load the settings via AJAX
			url: '/settings',
			type: 'GET',
			success: function(data){
				populate_settings(data);				//if successful, populate the settings
				update_status_and_ram(data);
			},
			error: function(data){
				//failure ALERT HERE..............
				populate_settings(default_settings);	//if failed, use default settings
				update_status_and_ram(default_settings);
				status_message(8); //alert("Error loading Settings.txt Default settings used");
			}
		});

		function populate_settings(string){
			var input_names = output_names = io_definitions = io_voltage_thresholds = retrigger_delays = new Array();
			var incoming_settings = string.split(";");	//split into substrings

			if (incoming_settings[incoming_settings.length - 1].length == 0) {		//test for length == 0 then delete element
				incoming_settings.splice(incoming_settings.length - 1,1);		//this trims off the junk after the last ";"
			};
		
			io_definitions = incoming_settings[0].split(",");	//split substrings into arrays of strings "1,2,3,..." --> ["1","2","3",...]
			input_names = incoming_settings[1].split(",");
			output_names = incoming_settings[2].split(",");
			io_voltage_thresholds = incoming_settings[3].split(",");
			retrigger_delays = incoming_settings[4].split(",");
		
			array_of_strings_to_ints(io_definitions);
			array_of_strings_to_ints(io_voltage_thresholds);
			array_of_strings_to_ints(retrigger_delays);
		
			/*
			console.log(io_definitions);
			console.log(input_names);
			console.log(output_names);
			console.log(io_voltage_thresholds);
			console.log(retrigger_delays);
			*/
			local_input_names = input_names;
			local_output_names = output_names;
		
			set_io_names("select.sensor",input_names);				//call the set io name functions
			set_io_names("select.output",output_names);
			
			set_inputs("input.highlow",pad_radio_array(io_definitions));	//be sure to pad the radio array with it's paired inversions before sending to the set_inputs function
			set_inputs(".input_name",input_names);
			set_inputs("div.settings .output_name",output_names);
			set_inputs("div.settings .threshold",io_voltage_thresholds);
			set_inputs("div.settings .retrigger",retrigger_delays);
		}//end populate_settings()
		
		function update_status_and_ram(data){
			data = data.split(";");									//parse the incoming string on ";"
			ram_status(data[data.length - 2]);						//update the free ram display (the 2nd to last element)
			status_message(parseInt(data[data.length - 3]));		//update the status alert (the 3rd to last element)
		}
	};//end load_settings()

	function set_override_output_names(){			//sets real names of outputs on the override page
		var i = 0;
		$("div.override td.override_output_name").each(function(){
			$(this).html(local_output_names[i]);
			i++;
		});
	}//end set_override_output_names
	
	function set_override_input_names(){			//sets real names of inputs on the override page
		var i = 0;
		$("div.override td.override_input_name").each(function(){
			$(this).html(local_input_names[i]);
			i++;
		});
	}//end set_override_input_names
	

	set_voltage_thresholds();			//setup the settings form with proper threshold values
	load_settings();					//load the data and populate form


	//##################################### General navigation manager ##################################### 
	$(".navbar .nav a").click(function(e){
		next_page = $(this);				//where are you navigating to?
		
		if (unsaved_changes) {				//check for change
			unsaved_modal();					//yes: present dialog
		}else{									//no: proceed with navigation change
			navigation_manager();
		}
		e.preventDefault();
	});//navbar.click()
	
	
	function navigation_manager(){
		if (!next_page){			//if you got here somehow without clicking
			next_page = $(".navbar .nav a.program");	//set the default page to program
		}
		var chosen = next_page.attr("class");
		
		if (chosen == "settings") {		//"Settings" clicked
			//load settings
			load_settings();					//load the data and populate form
		}else if (chosen == "program"){	//"Program" clicked
			load_settings();					//load the data and populate form
		}else if (chosen == "help"){	//"Export" clicked
			//load exports
				$.ajax({
					url: '/settings.txt',
					type: 'GET',
					beforeSend: function(){
						//show loading alert
						//$("div.alert").alert();
					},
					success: function(data){
						//hide alert
						//$("div.alert").alert('close');
						$("div.help pre.settings").html(data);
						console.log("file: " + data);

						//Nest the other .ajax call to program.txt here...
					},
					statusCode: {
						404: function(){
							$("div.help pre.settings").html("File not found");
							status_message(99);
						}
					},
					error: function(){
						//alert: fail
						$("div.help pre.settings").html("Please try again.");
					}
				});

				$.ajax({
					url: '/program.txt',
					type: 'GET',
					beforeSend: function(){
						//show loading alert
						//$("div.alert").alert();
					},
					success: function(data){
						//hide alert
						//$("div.alert").alert('close');
						$("div.help pre.program").html(data);
						console.log("file: " + data);
					},
					error: function(){
						//alert: fail
						$("div.help pre.program").html("Please try again.");
					}
				});//end ajax
		}else if (chosen == "override"){	//"override" clicked
			//anything special here?
			set_override_output_names();
			set_override_input_names();
		}

		set_active_nav(next_page);
	}
	
	$("#unsaved_modal .save").click(function(){	//defines what happens when the modal "Save Changes" is clicked
		$(this).button('loading');									//set button to loading state
		var modal_h3 = $("#unsaved_modal h3");						//save the header
		var modal_body = $("#unsaved_modal p");						//save the body
		modal_h3.html("Saving");									//change header to "saving"
		modal_body.html("Please wait while saving...");
		console.log(current_page);
		save(current_page);											//try to save
		$(this).button('reset');									//reset button
		$("#unsaved_modal").modal("hide");							//hide the modal
		modal_h3.html("Unsaved Changes");							//reset header
		modal_body.html("Would you like to save your changes?")		//reset body
		load_settings();											//reload the new settings and update the form
		set_active_nav(next_page);									//go on with navigation
	});
	
	$("#unsaved_modal .discard").click(function(){		//defines what happens when the modal "Discard Changes" is clicked
		unsaved_changes = false;				//reset unsaved_changes
		$("#unsaved_modal").modal('hide');		//hide the modal
		set_active_nav(next_page);				//go to the requested page
	});
	
	$("#refresh_settings, #refresh_program").click(function(){
		load_settings();
	});

	$("input, select").change(function(){
		if (unsaved_changes == false){
			unsaved_changes = true;
		}
	});
	
	$("input.wait_time").change(function(){					//whenever the wait field changes
		$(this).val(sanitize($(this).val()));		//update the input with sanitized
	});

	$(".save_program").click(function(){
		console.log("you clicked save program");
		$(this).html("Saving...");
		save("program");
	});

	$(".save_settings").click(function(){
		save("settings");
	});

	if (detectmobile()) {
		$("body").on("touchstart", ".wait .up, .duration .up", function(event){
			fast_plus_minus($(this).parent().next(),"+");
			event.preventDefault();
		});
		$("body").on("touchstart", ".wait .down, .duration .down", function(event){
			fast_plus_minus($(this).parent().next(),"-");
			event.preventDefault();
		});
		$("body").on("touchend", ".wait .up, .wait .down, .duration .up, .duration .down", function(event){			//stop when the mouse click stops
			stop_auto();										//stop all value auto increments
			event.preventDefault();
		});
	} else {
		$("body").on("mousedown", ".wait .up, .duration .up", function(){					//call the "+" handler
			fast_plus_minus($(this).parent().next(),"+");
		});
		$("body").on("mousedown", ".wait .down, .duration .down", function(){					//call the "-" handler
			fast_plus_minus($(this).parent().next(),"-");
		});
		$("body").on("mouseup", ".wait .up,.wait .down,.duration .up,.duration .down", function(){			//stop when the mouse click stops
			stop_auto();										//stop all value auto increments
		});
		$("body").on("mouseleave", ".wait .up,.wait .down,.duration .up,.duration .down", function(){		//stop when the mouse leaves the button (in case you held down then left)
			stop_auto();										//stop all value auto increments
		});
	}

	$("input.output_duration").change(function(){		//on manual keybaord entry
		var newval = 1;												//default new value
		var current = sanitize($(this).val());						//get the sanitized value
		if(current != 0){											//if sanitized not 0, then let it pass, otherwise use the default of 1
			newval = current;
		}
		$(this).val(newval);										//update field with either 1 or clean value
		console.log("changed, duration = " + newval);
	});

	$("select.duration_type").change(function(){					//when duration_type dropdown changes
		temp = $(this).val();										//get current value
		if(temp == "1" || temp == "0"){								//if "1" = "while input is triggered" or "0" (until further notice)
			$(this).next(".duration_container").fadeOut(250);		//fade out buttons & field
			$(this).children('option[value="2"]').html("for...")	//update grammar
		}else if(temp == "2"){									//if 2 (for...)
			$(this).next(".duration_container").fadeIn(250);		//show buttons & field
			$(this).children('option[value="2"]').html("for");		//update grammar
		}

		console.log("duration_type, value = " + $(".duration_type").val());
	});//duration_type.change()
	
	$(".input_name, output_name").alphanumeric({allow:" -.!@"});			//relies on the excellent work of https://github.com/treyhunner/jquery-formrestrict
	
	// $(".wait_time").numeric({allow:"1.111"});
	$("input.retrigger").change(function(){
		var newval = 1;												//default new value
		var current = sanitize($(this).val());						//get the sanitized value
		if(current != 0){											//if sanitized not 0, then let it pass, otherwise use the default of 1
			newval = current;
		}
		$(this).val(newval);										//update field with either 1 or clean value
	});

	$("a.brand").click(function(){
		$("div.alert").toggle();
	});
	
	$("div.alert .close").click(function(e){				//hide the alert when closed	
		$(this).parent().fadeOut();
		e.preventDefault();
	});

	$("div.help a.factory_defaults").click(function(){
		factory_defaults();
	});
	
	$("div.override button").click(function(){	//override controls
		var tempval = $(this).attr("value");
		//console.log(tempval);

		if (tempval == "all_on"){				//if all on
			$.get("all_on");					//go to url "/all_on"
		}else if (tempval == "all_off"){		//if all off
			$.get("all_off");					//get url "/all_off"
		}else{
			$.post("manual", { a: tempval });	//otherwise post the input# and on/off
												//the first integer is the input#, the second 1 = on, 0 = off
												//example input 1 off: 10
												//input 2 on: 21
		}
	});

//##################################### Utility Functions #####################################
	
	function unsaved_modal(){	//displays the unsaved changes warning with save/discard buttons
		if (unsaved_changes) {
			$('#unsaved_modal').modal({
				keyboard: true,
				show: true
			});
		}
	}//end unsaved_modal()
	
	function saved_successfully(type){
		console.log("saved_successfully has been called on line 598")
		var modal = $("#successful_save_modal");							//select the modal
		type = type.charAt(0).toUpperCase() + type.slice(1);				//capitalize first letter (program --> Program)
		modal.children().first().children("h3").html(type + " saved");		//change the modal h3 header
		modal.children().last().children("p").html(type + " saved");		//change the modal body
		modal.modal('show');												//show the modal
		timeout = setTimeout(function(){									//do stuff in... 2 seconds
				$(".save_program").html("Save Program");	//reset the Save button
				modal.modal('hide');										//hide the modal
			},2000);														//2 seconds
	}
	
	function set_active_nav(selector){	//this function acts like a tab manager
	//setting the clicked one to active, showing & hiding the appropriate content
	
		if (selector.parent().attr("class") != "active") {		//if the clicked is not already active
			$("#display_container").children().hide();									//hide all the other divs
			$("." + selector.attr("class")).show();										//show the right one
			$(selector).parent().attr("class","active").siblings().attr("class","");	//change the active highlight in the navbar
			current_page = selector.attr("class");										//save the current page into memory
		}
		//next_page = null;			//reset the next_page
	}
	
	function save(type) {	//this function sets up the call to cupcake with the columns you want sent
		var column_names = null;
		var file = type + ".txt"	//make a file name based on the save type
		
		if (type == "program"){
			column_names = ["div.program select.sensor", "div.program select.sensor_state", "div.program input.wait_time", "div.program select.output", "div.program select.output_state", "div.program select.duration_type", "div.program input.output_duration"];
		}else if (type == "settings"){
			column_names = ["div.settings input[type='radio']:checked", "div.settings input.input_name", "div.settings input.output_name", "div.settings select.threshold", "div.settings input.retrigger"];
		}		
		cupcake(column_names,file,type);		//send the data with the filename
	}
	
	function cupcake(column_names,file,type){	//preps the post string and sends it like a nice box of cupcakes
		var post_data = "";					//initialize the POST string
		var counter = 0;					//use to insert commas after each row

		for (var i=0, tot=column_names.length; i < tot; i++) {		
			$(column_names[i]).each(function(){	//loop through a single column
				counter ++;						//increment counter
				post_data += $(this).val();		//append value of input
				if(counter == $(column_names[i]).length){			//append appropriate element or row delimiter
					post_data += ";";			//row delimiter
					counter = 0;				//reset counter
				}else{
					post_data += ",";			//element delimiter
				};
			});//each element loop
		};//loop through each column

		console.log(post_data);				//log to firebug
		
		$.ajax({
			//ERROR HANDLING ********************************** PUT IN HERE ****************
				//if failed
				//unsaved_changes = true;
				//alert --> take action
				//if success
			url: '/upload/' + file,		//uploads to a specific file
			type: 'PUT',
			data: post_data,
			success: function(){
				if(unsaved_changes){
					unsaved_changes = false;
					navigation_manager();
				}else{
					status_message(0);
					console.log(type + "changes saved");
					saved_successfully(type);
				}
			},
			error: function(){		//keep unsaved_changes = true
				//alert which file failed --> take action
				status_message(7);
			}
		})
	};//end cupcake()

	function factory_defaults(){
		var ajax_status = 0;				//used to count if both .ajax calls succeeded for alerts
		console.log("resetting to defaults");
		$.ajax({
			url: '/upload/program.txt',		//uploads program file
			type: 'PUT',
			data: default_program,
			success: function(){
				console.log("reset program")
				ajax_status += 1;
				succeeded(ajax_status);
			},
			error: function(){
				failed();
			}
		})
		$.ajax({
			url: '/upload/settings.txt',		//uploads settings file
			type: 'PUT',
			data: default_settings,
			success: function(){
				console.log("reset settings")
				ajax_status += 1;
				succeeded(ajax_status);
			},
			error: function(){
				failed();
			}
		})
		
		function failed(){
			status_message(6);
		}
		function succeeded(status){	//only display success alert if both .ajax succeeded
			if (status == 2){
				status_message(5);
			}
		}
	}
	
	function fast_plus_minus(input,direction){	//this increments and fast increments either + or - based on the direction
		//it is called by the delay field and the duration field
		unsaved_changes = true;								//alerts the prog that something changed
		stop_auto();										//stop all value auto increments
		var current = sanitize(input.val());				//get sanitized current wait
		if(direction == "+"){								//if "+" was passed to the function
			input.val(input_up(current));					//get & set new value

			timeout = setTimeout(function(){				//This waits 1 second before...
				interval = setInterval(function(){			//auto ++ing value every n milliseconds
					current = sanitize(input.val());		//get sanitized current wait
					input.val(input_up(current));			//get & set new value
				}, increment_on_hold_speed);				//the speed of ++ing the value
			},increment_hold_delay);						//the delay (timeout) before ++ing
		} else if(direction == "-"){							//if "-" was passed to the function
			input.val(input_down(current));					//get & set new value

			timeout = setTimeout(function(){				//This waits 1 second before...
				interval = setInterval(function(){			//auto ++ing value every n milliseconds
					current = sanitize(input.val());		//get sanitized current wait
					input.val(input_down(current));			//get & set new value
				}, increment_on_hold_speed);				//the speed of auto ++ing the value
			},increment_hold_delay);						//the delay (timeout) before auto ++ing
		}
	}

	function input_up(current){								//this increments the current value up to 999
		//console.log("input_up " + current);
		var newval;
		if(current < 999){									//if less than 999
			newval = current + 1;							//add 1
		}else{
			newval = 999;									//if at 999, leave at 999
			stop_auto();									//stop auto timer, we're at zero
			//flash limit message here if you want				
		};
		return newval;
	};//end input_limits

	function input_down(current){							//this increments the current down to 0
		//console.log("input_down " + current);
		var newval;
		if(current <= 0){									//if 0 or negative
			newval = 0;										//set to zero
			stop_auto();									//stop auto timer, we're at zero
			//flash limit message here if you want
		}else{												//if positive
			newval = current - 1;							//subtract 1
		};
		return newval;
	};//end input_limits
	
	function ram_status(ram){		//simply updates the display with the passed free ram
		$(".navbar p.pull-right").fadeOut().html("Free RAM: " + ram).fadeIn();
	}
	
	function array_of_strings_to_ints(dirty_array){			//converts arrays of strings into arrays of integers ie: ["1","2","3",...] --> [1,2,3,...]
		for (i in dirty_array){								//for each element in the array
			dirty_array[i] = parseInt(dirty_array[i]);		//convert strings to int "1" --> 1
		}
	}
	
	function pad_radio_array(array) {		//this function takes an array and adds the opposite 1/0 after each corresponding element
											//it will double the size of the array ie: [1,1,0,0] --> [1,0,1,0,0,1,0,1]
		var new_padded_array = new Array();
		for (i in array){
			new_padded_array.splice(new_padded_array.length,0,array[i],1-array[i]);	//add the orig and inverted to the end of the new array (1-array[i] does the actual inversion)
		}
		//console.log("pad_radio_array input:  " + array);
		//console.log("pad_radio_array output: " + new_padded_array);
		return new_padded_array;
	};//end pad_radio_array()
	
	function set_io_names(select,names){					//this function sets the custom i/o names from the settings arrays
		var i = 0;											//inititalize counter variable
		var io_name_preface = [];
		if(select=="select.sensor") {
			io_name_preface = ["","A: ","B: ","C: ","D: ","E: ","F: "];
		}else if(select=="select.output"){
			io_name_preface = ["","1: ","2: ","3: ","4: ","5: ","6: "];
		}
		names.unshift("-");									//add the "-" to the beginning for the default choice
		$(select).each(function(){							//loop through each select.sensor
			$(this).children().each(function(){				//loop through each dropdown option
				$(this).html(io_name_preface[i] + names[i]);		//set the actual html names
				i ++;										//increment i
			});//end each option
			i = 0;											//reset i for next group of options
		});//end each input
		names.shift();										//delete the "-" added to the array (return it to how you got it)
	};//end set_select_names()
	
	function set_inputs(selector,array){			//this takes a jQuery selector (an input or select) and sets it w/ values from an array
		j = 0;										//init a counter var
		$(selector).each(function(){				//loop through each <select>
			for (i in array){						//loop through each element in array
				if (j == i){						//if this element # corresponds w/ this <select>
					
					//Do NOT set the value of the radios, it messes them up!!!!
					if ($(selector).attr("type") != "radio") {
						$(this).val(array[i]);			//set the value
					}

					//if the selector is a CHECKED radio (as on the settings page)
					if ($(selector).attr("type") == "radio" && array[i] == 1){
						$(this).attr("checked", "checked"); //Check it (the browser unchecks the other)
					};

					//if the selector is the duration type, we have to do some fancy stuff about the hidden fields
					if (selector == "select.duration_type") {
						temp_selected = $(this).next();			//reduce jquery calls
						if (array[i] == 2) {					//if the duration_type "for" (2)
							temp_selected.show();				//show the duration field
							$(this).children().last().html("for");	//and change the "for..." to "for"
						}else{
							temp_selected.hide();				//hide the duration field
						}
					};
				};
			};
			j ++;									//increment counter
		});
	};//end set_inputs()
		
	function set_voltage_thresholds(){
		//this funciton sets the values of the thresholds into the html of the form for submission
		$("select.threshold").each(function(){	//select each select.threshold
			//Set the html if you want
			//$(this).children().first().html("5V").val(threshold_5V).next().html("12V").val(threshold_12V).next().html("24V").val(threshold_24V);
			//Or just set the values base on tweakable variables
			$(this).children().first().val(threshold_5V).next().val(threshold_12V).next().val(threshold_24V);
		});
	}//end set_voltage_threshold()
		
	function status_message(status_code) {
		//switch 0,1,2,3,4,5,...
		//plug in status codes here and trigger an event if needed and a BOOTSTRAP alert if needed
		status_code = parseInt(status_code);
		if (isNaN(status_code)) {
			status_code = null;
		}
		var header = "", message = "", button1 = "", button2 = "", type = "alert-info";		//initialize defaults
		
		switch	(status_code){					//this entire switch really just changes the message in the alert
			case 0:
				//0 = all good
				header = "All systems go.";
				message = "Everything appears normal, sir/madam.";
				button1 = "button1";
				button2 = "button2";
				type = "alert-success";
				setTimeout(function(){
					$(".alert").fadeOut();
				},2000);
				break;
			case 1:
				//1 = program doesn't make sense --> reload or use defaults
				header = "Error 1";
				message = "1 = program doesn't make sense --> reload or use defaults";
				button1 = "button1";
				button2 = "button2";
				type = "alert-error";
				break;
			case 2:
				//2 = no SD card --> insert valid one and reset Arduino
				header = "Error 2: No valid SD card";
				message = "Please insert a valid SD card and reset Arduino";
				button1 = "button1";
				button2 = "button2";
				type = "alert-error";
				break;
			case 3:
				//3 = file opening problem --> NOT SURE WHAT TO DO
				header = "Error 3";
				message = "3 = file opening problem --> NOT SURE WHAT TO DO";
				button1 = "button1";
				button2 = "button2";
				type = "alert-error";
				break;
			case 4:
				//4 = corruption or read/write problem --> NOT SURE WHAT TO DO
				header = "Error 4";
				message = "4 = corruption or read/write problem --> NOT SURE WHAT TO DO";
				button1 = "button1";
				button2 = "button2";
				type = "alert-error";
				break;
			case 5:
				//5 = Factory Defaults Loaded
				header = "Hauntbox reset to factory defaults";
				message = "Factory defaults loaded";
				button1 = "button1";
				button2 = "button2";
				type = "alert-info";
				break;
			case 6:
				//6 = Factory Defaults Failed
				header = "Reset Failed";
				message = "Factory defaults failed to load. --> NOT SURE WHAT TO DO";
				button1 = "button1";
				button2 = "button2";
				type = "alert-error";
				break;
			case 7:
				//7 = Save failed
				header = "Save failed";
				message = "Saving the file failed. --> NOT SURE WHAT TO DO";
				button1 = "button1";
				button2 = "button2";
				type = "alert-error";
				break;
			case 8:
				//8 = Loading program/settings failed
				header = "Loading program.txt or settings.txt failed";
				message = "Please check that your SD card is functioning normally and reset power.";
				button1 = "button1";
				button2 = "button2";
				type = "alert-error";
				break;
		
			default:
				//if no error code or garbled --> NO CLUE WHAT SHOULD HAPPEN HERE
				header = "Unknown Error";
				message = "if no error code or garbled --> NO CLUE WHAT SHOULD HAPPEN HERE";
				button1 = "button1";
				button2 = "button2";
				type = "alert-error";
				break;
		}//end case
		
		var alert = $("div.alert");
		alert.hide();
		alert.attr("class","alert " + type).children("h4").html(header).next().html(message);
		alert.fadeIn();
	}//end status_message()
	
	function stop_auto(){				//this function is called whenever you want to stop auto incrementing
		clearInterval(interval);
		clearTimeout(timeout);
	};//end stop_auto
	
	function sanitize(num) {
		var sanitizedNum = parseFloat(num);
		if(isNaN(sanitizedNum)){					//sanitize, filter out NaN and negative numbers
			console.log("ERROR: num = " + num + "  	parseFloat(num) = " + sanitizedNum + "   ==> NaN");
			return "0";								//If the user entered garbage return 0
		}else{
			return sanitizedNum;					//Return the clean value
		};
	};//end sanitize()
	
	$("input[name='enable_disable']").click(function(){
		if($(this).attr("checked") == "checked"){
			$(this).next().fadeTo(100,1).find("input, select").prop("disabled", false);
		} else {
			$(this).next().fadeTo(100,.3).find("input, select").prop("disabled", true);
		}
	});

	function count_rows(){		//counts rows in program page
		var current_rows = $("div.program div.sentence_container").children().size();
		return current_rows;
	};

	function update_row_buttons(temp_count2){	//updates the add/subtract row buttons
		if (temp_count2 < max_rows){	//check "add row" button
			$("div.program button.add_row").prop("disabled", false);	//enable +
		}else{
			$("div.program button.add_row").prop("disabled", true);	//disable +
		}

		if (temp_count2 > min_rows){	//check "subtract row" button
			$("div.program button.subtract_row").prop("disabled", false);	//enable +
		}else{
			$("div.program button.subtract_row").prop("disabled", true);	//disable +
		}
		$("div.program .button_container span").html("Rows: " + temp_count2);
	};

	$("div.program .button_container button.add_row").click(function(){		//adds a row to the program page
		var temp_count = count_rows();
		if (temp_count < max_rows){
			$("div.program .sentence").last().clone({deepWithDataAndEvents: true}).appendTo("div.sentence_container");
		}
		update_row_buttons(temp_count + 1);
	});

	$("div.program .button_container button.subtract_row").click(function(){	//subtracts a row
		var temp_count = count_rows();
		if (temp_count > min_rows){
			$("div.program .sentence").last().remove();
		}
		update_row_buttons(temp_count - 1);
	});
});//doc.ready
</script>
</head>

<body>
	<div class="container body_container">	
		<div class="navbar">
			<ul class="nav">
				<li><a href="#" class="settings">Setup</a></li>
				<li class="active"><a href="#" class="program">Program</a></li>
				<li><a href="#" class="override">Override</a></li>
				<li><a href="#" class="help">Help</a></li>
			</ul>
			<p class="logo"><img src="hblogo.png" width="150" height="87" /></p>
			<div class="alert">
				<a class="close">&times;</a>
				<h4 class="alert-heading">Alert</h4>
				<p>Alert Info</p>
			</div>
			<p class="nav pull-right">Free RAM: ?</p>
		</div>

		<div id="display_container">
			<div class="program">
				<div class="subheader">
					<h2>Program</h2>
					<p>This is where the magic happens.<br />Complete the sentences to control your Hauntbox.</p>
				</div>
				<div class="sentence_headings">
					<h3 class="input">Input</h3>
					<h3 class="delay">Delay</h3>
					<h3 class="output">Output</h3>
					<h3 class="duration">Duration</h3>
				</div>
				<div class="sentence_container">
					<div class="sentence">
						<input type="checkbox" name="enable_disable">
						<div class="inner_sentence">
							<span class="input">
								When
								<select class="sensor" name="sensor3" disabled="disabled">
									<option value="0">-</option>
									<option value="1">input A</option>
									<option value="2">input B</option>
									<option value="3">input C</option>
									<option value="4">input D</option>
									<option value="5">input E</option>
									<option value="6">input F</option>
								</select>
								is
								<select class="sensor_state" name="sensor_state3" disabled="disabled">
									<option value="1">on</option>
									<option value="0">off</option>
								</select>
							</span><span class="delay">
								Wait
								<div class="wait">
									<span class="up">+</span>
									<span class="down">-</span>
								</div>
								<input type="text" class="wait_time" name="wait_time3" maxlength="5" value="0" disabled="disabled" />
								second(s) then turn
							</span><span class="output">
								<select class="output" name="output3" disabled="disabled">
									<option value="0">-</option>
									<option value="1">output 1</option>
									<option value="2">output 2</option>
									<option value="3">output 3</option>
									<option value="4">output 4</option>
									<option value="5">output 5</option>
									<option value="6">output 6</option>
								</select>
								<select class="output_state" name="output_state3" disabled="disabled">
									<option value="1">on</option>
									<option value="0">off</option>
									<option value="2">toggled</option>
								</select>
							</span><span class="duration">
								<select class="duration_type" disabled="disabled">
									<option value="0">until further notice.</option>
									<option value="1">while input is triggered.</option>
									<option value="2">for...</option>
								</select>
								<div class="duration_container">
									<div class="duration">
										<span class="up">+</span>
										<span class="down">-</span>
									</div>
									<input type="text" class="output_duration" name="output_duration" maxlength="5" value="0" disabled="disabled" />
									second(s).
								</div>
							</span>
							<span class="row_status"></span>
						</div>
					</div>
				</div>
				
				<div class="button_container">
					<button class="add_row" type="button"> + </button>
					<button class="subtract_row" type="button"> - </button>

					<span class="row_count">Rows: </span>
					<button class="save_program" name="save" type="button">Save Program</button>
					<button id="refresh_program" name="refresh" type="button">Refresh Program</button>
				</div>
				<div id="status_program"></div>
			</div><!-- //end program -->
			
			<div class="settings">
				<div class="subheader">
					<h2>Setup</h2>
					<p>These are the guts of the HauntBox. You can rename your inputs &amp; outputs.<br />Also set whether digital HIGH or LOW will trigger the input, and set the minimum time between triggers.</p>
				</div>

				<div class="inputs_container">
					<!--<h3>Inputs</h3>-->
					<div class="sentence_headings">
						<h3 class="voltage">Voltage</h3>
						<h3 class="io_name">Name</h3>
						<h3 class="high_or_low">High or Low</h3>
						<h3 class="retrigger">Retrigger Time</h3>
					</div>
					<div class="sentence">
						<span class="input_title">Input A</span>
						<select class="threshold">
							<option>5V</option>
							<option>12V</option>
							<option>24V</option>
						</select>:
						<input type="text" class="input_name" name="input1" maxlength="16" /> is considered on when its signal goes <input type="radio" class="highlow" name="highlow1" value="1" checked /> High <input type="radio" class="highlow" name="highlow1" value="0"> Low.&nbsp;
							Wait
							<div class="wait">
								<span class="up">+</span>
								<span class="down">-</span>
							</div>
							<input type="text" class="retrigger" maxlength="5" value="0" /> seconds before input retrigger.
						</div>
				</div>
				

				<div class="outputs_container">
					<div class="sentence">
						<span class="output_title">Output 1</span>
						<select class="threshold">
							<option>5V</option>
							<option>12V</option>
							<option>24V</option>
						</select>:
						<input type="text" class="output_name" name="output1" maxlength="16" /> is considered on when its signal goes <input type="radio" class="highlow" name="output_highlow1" value="1" checked />High<input type="radio" class="highlow" name="output_highlow1" value="0" />Low.
					</div>
				</div>
				<div class="button_container">
					<button class="save_settings" name="save" type="button">Save Settings</button>
					<button id="refresh_settings" name="refresh" type="button">Refresh Settings</button>
				</div>
				<div id="status_settings"></div>
			</div><!--//end div.settings -->

			<div class="override">
				<div class="subheader">
					<h2>Override</h2>
					<p>Want to take over?<br />Go ahead, push some buttons.</p>
				</div>

				<div class="container">
					<div class="row">
						<div class="offset1">
							<div class="btn-group" data-toggle="buttons-radio">
								<button type="button" class="btn">Automatic (normal)</button>
								<button type="button" class="btn">Manual (disables inputs)</button>
							</div>
						</div>
					</div>
					<div class="row">
						<div class="override_triggers span4">
							<h3>Inputs</h3>
							<table>
								<!--<tr><th>Input</th><th>Control</th></tr>-->
								<tr><td class="override_input_name">1</td><td><div class="btn-group">
										<button type="button" class="btn btn-large" value="11">&nbsp;&nbsp;&nbsp; Trigger &nbsp;&nbsp;&nbsp;</button>
									</div></td></tr>
								<tr><td class="override_input_name">2</td><td><div class="btn-group">
										<button type="button" class="btn btn-large" value="21">&nbsp;&nbsp;&nbsp; Trigger &nbsp;&nbsp;&nbsp;</button>
									</div></td></tr>
								<tr><td class="override_input_name">3</td><td><div class="btn-group">
										<button type="button" class="btn btn-large" value="31">&nbsp;&nbsp;&nbsp; Trigger &nbsp;&nbsp;&nbsp;</button>
									</div></td></tr>
								<tr><td class="override_input_name">4</td><td><div class="btn-group">
										<button type="button" class="btn btn-large" value="41">&nbsp;&nbsp;&nbsp; Trigger &nbsp;&nbsp;&nbsp;</button>
									</div></td></tr>
								<tr><td class="override_input_name">5</td><td><div class="btn-group">
										<button type="button" class="btn btn-large" value="51">&nbsp;&nbsp;&nbsp; Trigger &nbsp;&nbsp;&nbsp;</button>
									</div></td></tr>
								<tr><td class="override_input_name">6</td><td><div class="btn-group">
										<button type="button" class="btn btn-large" value="61">&nbsp;&nbsp;&nbsp; Trigger &nbsp;&nbsp;&nbsp;</button>
									</div></td></tr>
								<tr><td colspan="3"><div class="btn-group">
										<button type="button" class="btn btn-large" value="all_on">&nbsp;&nbsp;&nbsp; Trigger ALL &nbsp;&nbsp;&nbsp;</button>
									</div></td></tr>
							</table>
						</div>
						<div class="override_outputs span4">
							<h3>Outputs</h3>
							<table>
								<!--<tr><th>Output</th><th>Control</th></tr>-->
								<tr><td class="override_output_name">1</td><td><div class="btn-group">
										<button type="button" class="btn btn-large" value="11">&nbsp;&nbsp;&nbsp; ON &nbsp;&nbsp;&nbsp;</button>
										<button type="button" class="btn-large btn" value="10">&nbsp;&nbsp;&nbsp; OFF &nbsp;&nbsp;&nbsp;</button>
									</div></td></tr>
								<tr><td class="override_output_name">2</td><td><div class="btn-group">
										<button type="button" class="btn btn-large" value="21">&nbsp;&nbsp;&nbsp; ON &nbsp;&nbsp;&nbsp;</button>
										<button type="button" class="btn-large btn" value="20">&nbsp;&nbsp;&nbsp; OFF &nbsp;&nbsp;&nbsp;</button>
									</div></td></tr>
								<tr><td class="override_output_name">3</td><td><div class="btn-group">
										<button type="button" class="btn btn-large" value="31">&nbsp;&nbsp;&nbsp; ON &nbsp;&nbsp;&nbsp;</button>
										<button type="button" class="btn-large btn" value="30">&nbsp;&nbsp;&nbsp; OFF &nbsp;&nbsp;&nbsp;</button>
									</div></td></tr>
								<tr><td class="override_output_name">4</td><td><div class="btn-group">
										<button type="button" class="btn btn-large" value="41">&nbsp;&nbsp;&nbsp; ON &nbsp;&nbsp;&nbsp;</button>
										<button type="button" class="btn-large btn" value="40">&nbsp;&nbsp;&nbsp; OFF &nbsp;&nbsp;&nbsp;</button>
									</div></td></tr>
								<tr><td class="override_output_name">5</td><td><div class="btn-group">
										<button type="button" class="btn btn-large" value="51">&nbsp;&nbsp;&nbsp; ON &nbsp;&nbsp;&nbsp;</button>
										<button type="button" class="btn-large btn" value="50">&nbsp;&nbsp;&nbsp; OFF &nbsp;&nbsp;&nbsp;</button>
									</div></td></tr>
								<tr><td class="override_output_name">6</td><td><div class="btn-group">
										<button type="button" class="btn btn-large" value="61">&nbsp;&nbsp;&nbsp; ON &nbsp;&nbsp;&nbsp;</button>
										<button type="button" class="btn-large btn" value="60">&nbsp;&nbsp;&nbsp; OFF &nbsp;&nbsp;&nbsp;</button>
									</div></td></tr>
								<tr><td colspan="3"><div class="btn-group">
										<button type="button" class="btn btn-large" value="all_on">&nbsp;&nbsp;&nbsp; ALL ON &nbsp;&nbsp;&nbsp;</button>
										<button type="button" class="btn-large btn" value="all_off">&nbsp;&nbsp;&nbsp; ALL OFF &nbsp;&nbsp;&nbsp;</button>
									</div></td></tr>
							</table>
						</div>
					</div>
				</div>
			</div><!--//end div.override -->
			
			<div class="help">
				<div class="subheader">
					<h2>Help</h2>
					<p>Stumped?<br />Find some answers.</p>
				</div>
				<div class="container">
					<p>Please visit <a href="http://hauntbox.net/">hauntbox.net</a> for our store.</p>
					
					<p>Please consider adding to our <a href="https://github.com/Aylr/theHB/wiki">wiki</a> and you can find, hack, and contribute to our code at <a href="https://github.com/Aylr/theHB/">github</a>.</p>
					
					<button type="button" class="factory_defaults btn btn-danger">Reset to factory defaults</button>
					
					<p>kickstarter</p>
					<p>email</p>
					<p><a href="https://twitter.com/hauntbox" class="twitter-follow-button" data-show-count="false">Follow @hauntbox</a>
					<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
					<br />
					<a href="https://twitter.com/intent/tweet?screen_name=hauntbox" class="twitter-mention-button" data-size="large" data-related="hauntbox">Tweet to @hauntbox</a>
					<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
					</p>

					<h3>URL schema</h3>
					<pre>
						/program	current program + status + ram
						/settings	current settings + status + ram
						/program.txt	current program file
						/settings.txt	current settings file
						/ram		free ram
						/row_status	current row state (as defined in firmware)
						/output_status	current output state (on/off)
						/status.htm 	live status (slows down normal operation)
						/status 	returns intputState ; rowState ; outputState (used by status.htm)
						/all_on 	turns all on
						/all_off	turns all off
						/manual 	send post request with integers to control manually
					</pre>

					<h3>Your current settings</h3>
					<p>Copy and paste this into a text file for safekeeping or right click <a href="settings.txt">settings.txt</a> and save this file.</p>
					
					<pre class="settings">Settings string...........</pre>

					<h3>Your current program</h3>
					<p>Copy and paste this into a text file for safekeeping or right click <a href="program.txt">program.txt</a> and save this file.</p>
					<pre class="program">Program string...........</pre>
				</div>
			</div><!--//end div.help -->
		</div><!--//end display_container -->
		
		<div class="modal hide" id="unsaved_modal">
			<div class="modal-header">
				<a class="close" data-dismiss="modal">&times</a>
				<h3>Unsaved Changes</h3>
			</div>
			<div class="modal-body">
				<p>Would you like to save your changes?</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="discard btn">Discard changes</button>
				<button type="button" class="save btn btn-primary" data-loading-text="Saving...">Yes! Save changes</button>
			</div>
		</div>
		
		<div class="modal hide" id="successful_save_modal">
			<div class="modal-header">
				<a class="close" data-dismiss="modal">&times</a>
				<h3>Saved</h3>
			</div>
			<div class="modal-body">
				<p>Program saved successfully.</p>
			</div>
		</div>
	</div><!--//end .container -->
	<script src="bs_full.js" type="text/javascript" charset="utf-8"></script>
	<script src="frmrstmn.js" type="text/javascript" charset="utf-8"></script>
	<script src="alphnmin.js" type="text/javascript" charset="utf-8"></script>
</body>
</html>
