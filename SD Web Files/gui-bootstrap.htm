<!DOCTYPE html>
<html lang="en">
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HauntBox</title>
<link rel="stylesheet" href="bootstrap_full/bootstrap_full.css" type="text/css" media="screen" \>
<link rel="stylesheet" href="fontawes.css" type="text/css" media="screen, projection" \>
<style type="text/css">
div.settings input[type="text"] {
	width: 8.5em;
}
input, div.settings input.retrigger { /*slim up the wide 999 second boxes */
	width: 2em;
	text-align:right;
}
.settings select, .sensor_state, .output_state {
	width: 4.4em;
}
label {
	font-weight: normal;
}
div.duration_container {
	display: inline-block;
}
div.wait, div.duration {
	display: inline-block;
	position: relative;
	top: 8px;
}
div.wait a, div.duration a {
	display: block;
	border: 1px solid #aaa;
	background: rgb(247,247,247);
	font-size: 1em;
	text-align: center;
	text-decoration: none;
	color: #000;
	width: 15px;
	height: 16px;
	margin: 0 0 -1px 0;
}
</style>
<script src="jqry171.js"></script>
<script src="jquicust.js"></script>

<script>
$(function(){//shortcut for doc.ready
	//##################################### Important Variables ##################################### 
	
	var increment_on_hold_speed = 50;		//auto ++ing value every n milliseconds
	var increment_hold_delay = 1000;		//the delay in milliseconds (timeout) before auto ++ing
	var interval = null, timeout = null;	//vars for auto incrementing and auto delay
	var unsaved_changes = false;			//keep track if user has unsaved changes
	var current_page = "program";			//keeps track of current page
	var next_page = null;					//keeps track of next page
	var ABC = ["A","B","C","D","E","F"]		//used when naming the dynamically generated rows
	
	//ADC threshold values for inputs/outputs. Maths are done here to spare Arduino cycles
	var threshold_5V = 103;				//(5V / 5)*1024 = 103
	var threshold_12V = 246;			//(12V / 5)*1024 = 246
	var threshold_24V = 492;			//(24V / 5)*1024 = 492


	//##################################### Initial Page Load Stuff ##################################### 
	$("#unsaved_modal").modal('hide');
	for (i=1;i<6;i++){						//dynamically build the program rows
		$("div.program .sentence").first().clone({deepWithDataAndEvents: true}).appendTo(".sentence_container");
		//the settings rows are complicated by the radios that must be uniquely named
		$("div.settings .inputs_container .sentence").first().clone({deepWithDataAndEvents: true}).appendTo("div.settings .inputs_container").children("span").html("Input " + ABC[i]).parent().children("input[type=radio]").attr("name","highlow" + (i+1));
		$("div.settings .outputs_container .sentence").first().clone({deepWithDataAndEvents: true}).appendTo("div.settings .outputs_container").children("span").html("Output " + (i+1)).parent().children("input[type=radio]").attr("name","output_highlow" + (i+1));
	}
	$("#display_container").children().hide();			//load with all "tabs" hidden
	$("div.program").show();							//...except the program div

	function load_settings(){
		//this should load values from the firmware...
		//including intelligent defaults and populate the form correctly

		//Data receiving protocol (Arduino --> Browser)
		//Input array;Input on/off;On delay;Output array;Output on/off;Duration;status code;Free RAM;
		//0,0,0,0,0,0;1,1,1,1,1,1;0,0,0,0,0,0;0,0,0,0,0,0;1,1,1,1,1,1;0,0,0,0,0,0;0;182;

		//status codes
		//0 = all good
		//1 = program doesn't make sense --> reload or use defaults
		//2 = no SD card --> insert valid one and reset Arduino
		//3 = file opening problem --> NOT SURE WHAT TO DO
		//4 = corruption or read/write problem --> NOT SURE WHAT TO DO
		
		//GET REAL DATA FROM THE ARDUINO VIA A GET REQUEST
		var dummy_program_data = "1,2,3,4,5,6;0,1,0,1,0,1;0,1,10,100,500,900;6,5,4,3,2,1;0,1,0,1,0,1;0,1,10,100,500,900;1;778"
		
		var input_array = new Array(), input_onoff = new Array(), on_delay = new Array(), output_array = new Array(), output_onoff = new Array(), duration = new Array();
		
		var incoming_program = dummy_program_data.split(";")		//split into substrings
		var input_array = incoming_program[0].split(",");		//split substrings into arrays of strings "1,2,3,..." --> ["1","2","3",...]
		var input_onoff = incoming_program[1].split(",");
		var on_delay = incoming_program[2].split(",");
		var output_array = incoming_program[3].split(",");
		var output_onoff = incoming_program[4].split(",");
		var duration = incoming_program[5].split(",");
				
		array_of_strings_to_ints(input_array);							//run all the arrays through the integerizer
		array_of_strings_to_ints(input_onoff);							//CONSIDER PUTTING THE SPLIT "," STUFF INTO THE CLEAN() FUNCTION
 		array_of_strings_to_ints(on_delay);
		array_of_strings_to_ints(output_array);
		array_of_strings_to_ints(output_onoff);
		array_of_strings_to_ints(duration);
		
		/*
		console.log(input_array);
		console.log(input_onoff);
		console.log(on_delay);
		console.log(output_array);
		console.log(output_onoff);
		console.log(duration);
		*/
		
		//Settings receiving protocol (Arduino --> Browser)
		//input defs;output defs;input names;output names;thresholds;retrigger;status code;Free RAM;
		//"1,1,1,1,1,1,1,1,1,1,1,1;input1,input2,input3,input4,input5,input6;output1,output2,output3,output4,output5,output6;thresholds...;retrigger;0;199;"
		//
	
		//LOAD THE ACTUAL SETTINGS HERE VIA AJAX REQUEST...
		var dummy_settings_data = "0,1,0,0,1,0,0,0,1,0,0,0;input1,input2,input3,input4,input5,input6;output1,output2,output3,output4,output5,output6;103,246,492,103,246,492,103,246,492,103,246,492;1,2,3,4,5,6;0;199;"
		var input_names = new Array(), output_names = new Array(), io_definitions = new Array(), io_voltage_thresholds = new Array(), retrigger_delays = new Array();

		var incoming_settings = dummy_settings_data.split(";");	//split into substrings

		if (incoming_settings[incoming_settings.length - 1].length == 0) {		//test for length == 0 then delete element
			incoming_settings.splice(incoming_settings.length - 1,1);		//this trims off the junk after the last ";"
		};
		
		io_definitions = incoming_settings[0].split(",");	//split substrings into arrays of strings "1,2,3,..." --> ["1","2","3",...]
		input_names = incoming_settings[1].split(",");
		output_names = incoming_settings[2].split(",");
		io_voltage_thresholds = incoming_settings[3].split(",");
		retrigger_delays = incoming_settings[4].split(",");
		
		array_of_strings_to_ints(io_definitions);
		array_of_strings_to_ints(io_voltage_thresholds);
		array_of_strings_to_ints(retrigger_delays);
		
		/*
		console.log(io_definitions);
		console.log(input_names);
		console.log(output_names);
		console.log(io_voltage_thresholds);
		console.log(retrigger_delays);
		*/
		
		set_io_names("select.sensor",input_names);				//call the set io name functions
		set_io_names("select.output",output_names);
	
		//if definitions, names are blank, populate w/ intellegent defaults
		//DECIDE WHAT THE DEFAULTS SHOULD BE AND LINK W/ FIRMWARE
		
		set_inputs("select.sensor",input_array);			//set each input with the appropriate array
		set_inputs("select.sensor_state",input_onoff);
		set_inputs("input.wait_time",on_delay);
		set_inputs("select.output",output_array);
		set_inputs("select.output_state",output_onoff);
		set_inputs("input.output_duration",duration);
		
		set_inputs("input.highlow",pad_radio_array(io_definitions));	//be sure to pad the radio array with it's paired inversions before sending to the set_inputs function
		set_inputs(".input_name",input_names);
		set_inputs("div.settings .output_name",output_names);
		set_inputs("div.settings .threshold",io_voltage_thresholds);
		set_inputs("div.settings .retrigger",retrigger_delays);
		
		status_message(parseInt(incoming_settings[5]));		//update the status alert
		console.log(incoming_settings);
		ram_status(incoming_settings[6]);					//update the free ram display

	};//end load_settings()
	
	set_voltage_thresholds();			//setup the settings form with proper threshold values
	load_settings();					//load the data and populate form


	//##################################### General button stuff ##################################### 
	$(".navbar .nav a").click(function(){
		next_page = $(this);				//where are you navigating to?
		
		if (unsaved_changes) {				//check for change
			unsaved_modal();					//yes: present dialog
		}else{									//no: proceed with navigation change
			var chosen = $(this).attr("class");
			if (chosen == "settings") {
			//load settings
			}else if (chosen == "program"){
			//load program
			}
			set_active_nav(next_page);
		}
	});
	
	$(".modal .save").click(function(){		//defines what happens when the modal "Save Changes" is clicked
		$(this).button('loading');			//set button to loading state
		var modal_h3 = $(".modal h3");		//save the header
		var modal_body = $(".modal p");		//save the body
		modal_h3.html("Saving");			//change header to "saving"
		modal_body.html("Please wait while saving...");
		save(current_page);					//try to save
		$(this).button('reset');			//reset button
		$(".modal").modal("hide");			//hide the modal
		modal_h3.html("Unsaved Changes");	//reset header
		modal_body.html("Would you like to save your changes?")		//reset body
		set_active_nav(next_page);			//go on with navigation
	});
	
	$(".modal .discard").click(function(){		//defines what happens when the modal "Discard Changes" is clicked
		unsaved_changes = false;		//reset unsaved_changes
		$(".modal").modal('hide');		//hide the modal
		set_active_nav(next_page);		//go to the requested page
	});
	
	$("#refresh_settings, #refresh_program").click(function(){
		load_settings();
	});

	$("input, select").change(function(){
		if (unsaved_changes == false){
			unsaved_changes = true;
		}
	});
	
	$("input.wait_time").change(function(){					//whenever the wait field changes
		$(this).val(parseInt(sanitize($(this).val())));		//update the input with sanitized
	});

	$(".save_program").click(function(){
		save("program");
	});

	$(".save_settings").click(function(){
		save("settings");
	});

	$(".wait .up").mousedown(function(){					//call the "+" handler
		fast_plus_minus($(this).parent().next(),"+");
	});
	$(".wait .down").mousedown(function(){					//call the "-" handler
		fast_plus_minus($(this).parent().next(),"-");
	});
	$(".wait .up,.wait .down,.duration .up,.duration .down").mouseup(function(){			//stop when the mouse click stops
		stop_auto();										//stop all value auto increments
	});
	$(".wait .up,.wait .down,.duration .up,.duration .down").mouseleave(function(){		//stop when the mouse leaves the button (in case you held down then left)
		stop_auto();										//stop all value auto increments
	});

	$("input.output_duration").change(function(){					//on manual keybaord entry
		var newval = 1;												//default new value
		var current = sanitize($(this).val());						//get the sanitized value
		if(current != 0){											//if sanitized not 0, then let it pass, otherwise use the default of 1
			newval = current;
		}
		$(this).val(newval);										//update field with either 1 or clean value
		console.log("changed, duration = " + newval);
	});

	$("select.output_duration").change(function(){					//when dropdown changes...
		temp = $(this).val();										//get current value
		var new_duration;											//initialize new duration
		if(temp == "constantly"){									//if "constantly"
			$(this).next(".duration_container").fadeOut(250);		//fade out buttons & field
			$(this).children('option[value="for"]').html("for...")	//update grammar
			new_duration = 0;										//set duration = 0
		}else if(temp == "for"){									//if "for..".
			$(this).next(".duration_container").fadeIn(250);		//show buttons & field
			$(this).children('option[value="for"]').html("for");	//update grammar
			new_duration = "1";										//set duration = 1
		}
		$(this).next().children('input[class="output_duration"]').val(new_duration);	//set the field to the new value	
		console.log("output changed, value = " + $("#output_duration3").val());
	});//output_duration.change()

	$(".duration .up").mousedown(function(){				//call the "+" handler
		fast_plus_minus($(this).parent().next(),"+");
	});
	$(".duration .down").mousedown(function(){				//call the "-" handler
		fast_plus_minus($(this).parent().next(),"-");
	});
	
	$(".input_name, output_name").alphanumeric({allow:" -.!@"});			//relies on the excellent work of https://github.com/treyhunner/jquery-formrestrict
	$(".wait_time").numeric();

//##################################### Utility Functions #####################################
	
	function unsaved_modal(){
		if (unsaved_changes) {
			$('#unsaved_modal').modal({
				keyboard: true,
				show: true
			});
		}
	}//end unsaved_modal()
	
	function set_active_nav(selector){	//this function acts like a tab manager
	//setting the clicked one to active, showing & hiding the appropriate content
	
		if (selector.parent().attr("class") != "active") {		//if the clicked is not already active
			$("#display_container").children().hide();									//hide all the other divs
			$("." + selector.attr("class")).show();										//show the right one
			$(selector).parent().attr("class","active").siblings().attr("class","");	//change the active highlight in the navbar
			current_page = selector.attr("class");										//save the current page into memory
		}
		next_page = null;			//reset the next_page
	}
	
	function save(type) {	//this function sets up the call to cupcake with the columns you want sent
		var colum_names = null;
		if (type == "program"){
			column_names = ["div.program select.sensor", "div.program select.sensor_state", "div.program input.wait_time", "div.program select.output", "div.program select.output_state", "div.program input.output_duration"];
		}else if (type == "settings"){
			column_names = ["div.settings input[type='radio']:checked", "div.settings input.input_name", "div.settings input.output_name", "div.settings select.threshold", "div.settings input.retrigger"];
		}
		cupcake(column_names);		//send the data!
	}
	
	function cupcake(column_names){			//preps the post string and sends it like a nice box of cupcakes
		var post_data = "";					//initialize the POST string
		var counter = 0;					//use to insert commas after each row

		for (var i=0, tot=column_names.length; i < tot; i++) {
			//console.log($(column_names[i]));			//log the current object
		    //console.log($(column_names[i]).length);		//log the current object length
		
			$(column_names[i]).each(function(){	//loop through a single column
				counter ++;						//increment counter
				post_data += $(this).val();		//append value of input
				if(counter == $(column_names[i]).length){			//append appropriate element or row delimiter
					post_data += ";";			//row delimiter
					counter = 0;				//reset counter
				}else{
					post_data += ",";			//element delimiter
				};
			});//each element loop
		};//loop through each column

		console.log(post_data);				//log to firebug
		alert("Simulating save.... " + post_data);
		
		//ERROR HANDLING ********************************** PUT IN HERE ****************
			//if failed
			//unsaved_changes = true;
			//alert --> take action
			//if success
		unsaved_changes = false;	//TEMPORARY HACK TO MIMIC SUCCESS OF POST
		
		$.post("/testget", post_data, function(data){ 	//the AJAX bit
			$("#status_program").hide().html(data).fadeIn();
		});
	};//end cupcake()

	function fast_plus_minus(input,direction){	//this increments and fast increments either + or - based on the direction
		//it is called by the delay field and the duration field
		unsaved_changes = true;								//alerts the prog that something changed
		stop_auto();										//stop all value auto increments
		var current = sanitize(input.val());				//get sanitized current wait
		if(direction == "+"){								//if "+" was passed to the function
			input.val(input_up(current));					//get & set new value

			timeout = setTimeout(function(){				//This waits 1 second before...
				interval = setInterval(function(){			//auto ++ing value every n milliseconds
					current = sanitize(input.val());		//get sanitized current wait
					input.val(input_up(current));			//get & set new value
				}, increment_on_hold_speed);				//the speed of ++ing the value
			},increment_hold_delay);						//the delay (timeout) before ++ing
		}else if(direction == "-"){							//if "-" was passed to the function
			input.val(input_down(current));					//get & set new value

			timeout = setTimeout(function(){				//This waits 1 second before...
				interval = setInterval(function(){			//auto ++ing value every n milliseconds
					current = sanitize(input.val());		//get sanitized current wait
					input.val(input_down(current));			//get & set new value
				}, increment_on_hold_speed);				//the speed of auto ++ing the value
			},increment_hold_delay);						//the delay (timeout) before auto ++ing
		};
		return false;										//prevent the html link from doing anything	
	};

	function input_up(current){								//this increments the current value up to 999
		//console.log("input_up " + current);
		var newval;
		if(current < 999){									//if less than 999
			newval = current + 1;							//add 1
		}else{
			newval = 999;									//if at 999, leave at 999
			stop_auto();									//stop auto timer, we're at zero
			//flash limit message here if you want				
		};
		return newval;
	};//end input_limits

	function input_down(current){							//this increments the current down to 0
		//console.log("input_down " + current);
		var newval;
		if(current <= 0){									//if 0 or negative
			newval = 0;										//set to zero
			stop_auto();									//stop auto timer, we're at zero
			//flash limit message here if you want
		}else{												//if positive
			newval = current - 1;							//subtract 1
		};
		return newval;
	};//end input_limits
	
	function ram_status(ram){		//simply updates the display with the passed free ram
		$(".navbar p.pull-right").fadeOut().html("Free RAM: " + ram + "K").fadeIn();
	}
	
	function array_of_strings_to_ints(dirty_array){			//converts arrays of strings into arrays of integers ie: ["1","2","3",...] --> [1,2,3,...]
		for (i in dirty_array){								//for each element in the array
			dirty_array[i] = parseInt(dirty_array[i]);		//convert strings to int "1" --> 1
		}
	}
	
	function pad_radio_array(array) {		//this function takes an array and adds the opposite 1/0 after each corresponding element
											//it will double the size of the array ie: [1,1,0,0] --> [1,0,1,0,0,1,0,1]
		var new_padded_array = new Array();
		for (i in array){
			new_padded_array.splice(new_padded_array.length,0,array[i],1-array[i]);	//add the orig and inverted to the end of the new array (1-array[i] does the actual inversion)
		}
		//console.log("pad_radio_array input:  " + array);
		//console.log("pad_radio_array output: " + new_padded_array);
		return new_padded_array;
	};//end pad_radio_array()
	
	function set_io_names(select,names){					//this function sets the custom i/o names from the settings arrays
		var i = 0;											//inititalize counter variable
		names.unshift("-");									//add the "-" to the beginning for the default choice
		$(select).each(function(){							//loop through each select.sensor
			$(this).children().each(function(){				//loop through each dropdown option
				$(this).html(names[i]);						//set the actual html names					
				i ++;										//increment i
			});//end each option
			i = 0;											//reset i for next group of options
		});//end each input
		names.shift();										//delete the "-" added to the array (return it to how you got it)
	};//end set_select_names()
	
	function set_inputs(selector,array){			//this takes a jQuery selector (an input or select) and sets it w/ values from an array
		j = 0;										//init a counter var
		$(selector).each(function(){				//loop through each <select>
			for (i in array){						//loop through each element in array
				if (j == i){						//if this element # corresponds w/ this <select>
					
					//Do NOT set the value of the radios, it messes them up!!!!
					if ($(selector).attr("type") != "radio") {
						$(this).val(array[i]);			//set the value
					}

					//if the selector is a CHECKED radio (as on the settings page)
					if ($(selector).attr("type") == "radio" && array[i] == 1){
						$(this).attr("checked", "checked"); //Check it (the browser unchecks the other)
					};

					//if the selector is the output duration, we have to do some fancy stuff about the hidden fields
					if (selector == "input.output_duration") {
						temp_selected = $(this).parent();							//reduce jquery calls
						if (array[i] > 0) {											//if the duration is not zero
							temp_selected.show();									//show the input field
							temp_selected.prev().val("for");						//choose the "for" select
							temp_selected.prev().children().last().html("for");		//and change the "for..." to "for"
						}else{													//if it is 0
							temp_selected.hide();									//hide the field
							temp_selected.prev().val("constantly");					//and choose "constantly" to complete the sentence
						}
					};
				};
			};
			j ++;									//increment counter
		});
	};//end set_inputs()
		
	function set_voltage_thresholds(){
		//this funciton sets the values of the thresholds into the html of the form for submission
		$("select.threshold").each(function(){	//select each select.threshold
			//Set the html if you want
			//$(this).children().first().html("5V").val(threshold_5V).next().html("12V").val(threshold_12V).next().html("24V").val(threshold_24V);
			//Or just set the values base on tweakable variables
			$(this).children().first().val(threshold_5V).next().val(threshold_12V).next().val(threshold_24V);
		});
	}//end set_voltage_threshold()
		
	function status_message(status_code) {
		//switch 0,1,2,3,4,5
		//plug in status codes here and trigger an event if needed
		//and a BOOTSTRAP alert if needed
		status_code = parseInt(status_code);
		if (isNaN(status_code)) {
			status_code = null;
		}
		var header = "", message = "", button1 = "", button2 = "", type = "alert-info";
		
		switch	(status_code){					//this entire switch really just changes the message in the alert
			case 0:
				//0 = all good
				header = "All systems good";
				message = "Everything appears normal, captian.";
				button1 = "button1";
				button2 = "button2";
				type = "alert-success";
				break;
			case 1:
				//1 = program doesn't make sense --> reload or use defaults
				header = "Error 1";
				message = "1 = program doesn't make sense --> reload or use defaults";
				button1 = "button1";
				button2 = "button2";
				type = "alert-error";
				break;
			case 2:
				//2 = no SD card --> insert valid one and reset Arduino
				header = "Error 2";
				message = "2 = no SD card --> insert valid one and reset Arduino";
				button1 = "button1";
				button2 = "button2";
				type = "alert-error";
				break;
			case 3:
				//3 = file opening problem --> NOT SURE WHAT TO DO
				header = "Error 3";
				message = "3 = file opening problem --> NOT SURE WHAT TO DO";
				button1 = "button1";
				button2 = "button2";
				type = "alert-error";
				break;
			case 4:
				//4 = corruption or read/write problem --> NOT SURE WHAT TO DO
				header = "Error 4";
				message = "4 = corruption or read/write problem --> NOT SURE WHAT TO DO";
				button1 = "button1";
				button2 = "button2";
				type = "alert-error";
				break;
			default:
				//if no error code or garbled --> NO CLUE WHAT SHOULD HAPPEN HERE
				header = "Unknown Error";
				message = "if no error code or garbled --> NO CLUE WHAT SHOULD HAPPEN HERE";
				button1 = "button1";
				button2 = "button2";
				type = "alert-error";
				break;
		}//end case
		
		//var alert = $("div.alert");
		$("div.alert").attr("class","alert " + type).children("h4").html(header).next().html(message);

		console.log("status_code: " + status_code);
	}//end status_message()
	
	function stop_auto(){				//this function is called whenever you want to stop auto incrementing
		clearInterval(interval);
		clearTimeout(timeout);
		//console.log("stopped");
	};//end stop_auto
	
	function sanitize(num) {
		if(parseInt(num) >= 0){					//sanitize, filter out NaN and negative numbers
			//console.log("OK: num = " + num + "  	parseInt(num) = " + parseInt(num));
		    return parseInt(num);				//return the clean value
		}else{
			console.log("ERROR: num = " + num + "  	parseInt(num) = " + parseInt(num) + "   ==> 0");
			return "0";							//if the user entered garbage, set to "0"
		};
	};//end sanitize()
	
});//doc.ready
</script>
</head>

<body>
	<div class="container">
	<div class="navbar">
		<div class="navbar-inner">
			<div class="container">
				<a class="brand" href="#">HauntBox</a>
					<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
				</a>
				<div class="nav-collapse">
					<ul class="nav">
						<li class="active"><a href="#" class="program"><i style="font-size:18px;" class="icon-home"></i> Program</a></li>
						<li><a href="#" class="settings"><i style="font-size:18px;" class="icon-cogs"></i> Settings</a></li>
						<li><a href="#" class="export"><i style="font-size:18px;" class="icon-download-alt"></i> Export</a></li>
						<li><a href="#" class="help"><i style="font-size:18px;" class="icon-question-sign"></i> Help</a></li>
					</ul>
					<p class="nav pull-right">Free RAM: ?K</p>
				</div><!--/.nav-collapse -->
			</div>
		</div>
	</div><!--//.navbar -->
	
	<div class="alert">
		<a class="close" data-dismiss="alert">&times;</a>
		<h4 class="alert-heading">HTML alert header</h4>
		<p>html text</p>
	</div>

<div id="display_container">    
	<div class="program">
		<h2>Program</h2>
		<p>Some kind of description here.</p>
		<div class="sentence_container">
			<div class="sentence">
				When
				<select class="sensor" name="sensor3">
					<option value="0">-</option>
					<option value="1">input A</option>
					<option value="2">input B</option>
					<option value="3">input C</option>
					<option value="4">input D</option>
					<option value="5">input E</option>
					<option value="6">input F</option>
				</select>
				is
				<select class="sensor_state" name="sensor_state3">
					<option value="1">on</option>
					<option value="0">off</option>
				</select>
				&nbsp;&nbsp;:&nbsp;&nbsp;
				Wait
				<div class="wait">
					<a href="#" class="up">+</a>
					<a href="#" class="down">-</a>
				</div>
				<input type="text" class="wait_time" name="wait_time3" maxlength="3" value="0" />
				second(s) then keep
				<select class="output" name="output3">
					<option value="0">-</option>
					<option value="1">output 1</option>
					<option value="2">output 2</option>
					<option value="3">output 3</option>
					<option value="4">output 4</option>
					<option value="5">output 5</option>
					<option value="6">output 6</option>
				</select>
				<select class="output_state" name="output_state3">
					<option value="1">on</option>
					<option value="0">off</option>
				</select>
				<select class="output_duration">
					<option value="constantly">constantly.</option>
					<option value="for">for...</option>
				</select>
				<div class="duration_container">
					<div class="duration">
						<a href="#" class="up">+</a>
						<a href="#" class="down">-</a>
					</div>
					<input type="text" class="output_duration" name="output_duration3" maxlength="3" value="0" />
					second(s).
				</div>
				<span class="row_status"></span>
			</div>

		</div>
		
		<button class="save_program" name="save" type="button"><i class="icon-check"></i> Save Program</button>
		<button id="refresh_program" name="refresh" type="button"><i class="icon-refresh"></i> Refresh Program</button>	
		<div id="status_program"></div>
	</div><!-- //end program -->
	
	<div class="settings">
		<h2>Settings</h2>
		<p>Feel free to rename your inputs and outputs here. You can also set whether
			digital HIGH or LOW will trigger the input.</p>

		<div class="inputs_container">
			<h3>Inputs</h3>
			<div class="sentence">
				<span class="input_title">Input A</span>
				<select class="threshold">
					<option>5V</option>
					<option>12V</option>
					<option>24V</option>
				</select>:
				<input type="text" class="input_name" name="input1" maxlength="16" /> is considered on when its signal goes <input type="radio" class="highlow" name="highlow1" value="1" checked />High<input type="radio" class="highlow" name="highlow1" value="0">Low.&nbsp;
					Wait
					<div class="wait">
						<a href="#" class="up">+</a>
						<a href="#" class="down">-</a>
					</div>
					<input type="text" class="retrigger" maxlength="3" value="0" /> seconds before input can be re-triggered.
				</div>
		</div>
		
		<div class="outputs_container">
			<h3>Outputs</h3>
			<div class="sentence">
				<span class="output_title">Output 1</span>
				<select class="threshold">
					<option>5V</option>
					<option>12V</option>
					<option>24V</option>
				</select>:
				<input type="text" class="output_name" name="output1" maxlength="16" /> is considered on when its signal goes <input type="radio" class="highlow" name="output_highlow1" value="1" checked />High<input type="radio" class="highlow" name="output_highlow1" value="0" />Low.
			</div>
		</div>
		
		<button class="save_settings" name="save" type="button"><i class="icon-check"></i> Save Settings</button>
		<button id="refresh_settings" name="refresh" type="button"><i class="icon-refresh"></i> Refresh Settings</button>
		<div id="status_settings"></div>
	</div>

	<div class="export">
		<h2>Export All</h2>
		<p>To save your favorite HauntBox setups from time to time.</p>
	</div>
	
	<div class="help">
		<h2>Help</h2>
		<p>Please visit our <a href="">website</a> for updated support</p>
		<p>kickstarter</p>
		<p>email</p>
		<p><a href="https://twitter.com/hauntbox" class="twitter-follow-button" data-show-count="false">Follow @hauntbox</a>
		<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
		<br />
		<a href="https://twitter.com/intent/tweet?screen_name=hauntbox" class="twitter-mention-button" data-size="large" data-related="hauntbox">Tweet to @hauntbox</a>
		<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
		</p>
	</div>
	
	</div><!--//end display_container -->
	
	<div class="modal hide" id="unsaved_modal">
		<div class="modal-header">
			<a class="close" data-dismiss="modal">&times</a>
			<h3>Unsaved Changes</h3>
		</div>
		<div class="modal-body">
			<p>Would you like to save your changes?</p>
		</div>
		<div class="modal-footer">
			<a href="#" class="discard btn">Discard changes</a>
			<a href="#" class="save btn btn-primary" data-loading-text="Saving...">Yes! Save changes</a>
		</div>
	</div>
	
</div><!--//end .container -->

	
	<script src="hbscript.js"></script>
	<script src="bootstrap_full/bootstrap_full.js" type="text/javascript" charset="utf-8"></script>
	<script src="jquery.alphanumeric.js" type="text/javascript" charset="utf-8"></script>
	<script src="jquery.formrestrict.js" type="text/javascript" charset="utf-8"></script>
	

</body>
</html>